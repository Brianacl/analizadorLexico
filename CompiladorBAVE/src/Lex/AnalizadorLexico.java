/* The following code was generated by JFlex 1.6.1 */

package Lex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }

//Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token #"+numToken+": "+token+" Comp. lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
}
/* Seccion de opciones y declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lex/alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\5\2\0\1\6\22\0\1\4\1\51\10\0\1\54\1\52"+
    "\1\0\1\53\1\0\1\55\12\3\2\0\1\47\1\46\1\50\2\0"+
    "\1\33\1\2\1\35\1\31\1\40\3\2\1\7\2\2\1\36\1\2"+
    "\1\42\1\45\1\14\1\2\1\44\1\41\1\43\6\2\4\0\1\2"+
    "\1\0\1\13\1\34\1\12\1\30\1\25\1\22\1\17\1\1\1\11"+
    "\2\1\1\24\1\20\1\10\1\16\1\32\1\1\1\15\1\21\1\26"+
    "\1\23\1\27\3\1\1\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\1\11\2"+
    "\3\1\1\6\1\7\1\10\1\1\1\11\1\12\1\13"+
    "\1\14\1\0\6\2\1\15\13\2\3\0\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\0"+
    "\24\2\4\0\7\2\1\27\15\2\1\30\3\0\1\31"+
    "\12\2\1\32\12\2\3\0\1\2\1\33\13\2\1\34"+
    "\3\2\1\35\2\2\1\0\1\36\1\0\3\2\1\37"+
    "\5\2\1\40\6\2\1\41\1\2\1\42\1\0\3\2"+
    "\1\43\4\2\1\44\7\2\1\0\1\2\1\45\4\2"+
    "\1\46\11\2\1\0\4\2\1\47\12\2\1\0\5\2"+
    "\1\50\1\51\7\2\1\0\6\2\1\52\1\53\4\2"+
    "\1\0\5\2\1\54\4\2\1\55\6\2\1\56\1\2"+
    "\1\57\3\2\1\60\4\2\1\61\1\62\1\63\1\64"+
    "\4\2\1\65\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\56\0\56\0\270\0\346"+
    "\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256"+
    "\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\56\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\56\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\56\0\56\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0e04\0\134\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c"+
    "\0\u105a\0\56\0\u1088\0\u10b6\0\u10e4\0\134\0\u1112\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\134\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2"+
    "\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\134"+
    "\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4"+
    "\0\u16d2\0\u1700\0\u172e\0\134\0\u175c\0\u178a\0\u17b8\0\134"+
    "\0\u17e6\0\u1814\0\u1842\0\56\0\u1870\0\u189e\0\u18cc\0\u18fa"+
    "\0\134\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\134\0\u1a0e"+
    "\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\134\0\u1b22\0\56"+
    "\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\134\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\134\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\u1e30\0\134\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\134\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a"+
    "\0\u2058\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\134"+
    "\0\u219a\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc"+
    "\0\u230a\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c"+
    "\0\134\0\134\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560"+
    "\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0"+
    "\0\134\0\134\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6\0\u27e4"+
    "\0\u2812\0\u2840\0\u286e\0\u289c\0\134\0\u28ca\0\u28f8\0\u2926"+
    "\0\u2954\0\56\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68"+
    "\0\134\0\u2a96\0\134\0\u2ac4\0\u2af2\0\u2b20\0\134\0\u2b4e"+
    "\0\u2b7c\0\u2baa\0\u2bd8\0\134\0\134\0\134\0\134\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\134\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\2\3\1\11\1\12\1\2\3\3\1\13\1\14\1\15"+
    "\2\3\1\16\1\17\1\20\1\21\1\2\1\3\1\22"+
    "\1\3\2\2\1\3\1\23\1\24\4\2\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\57\0\3\3"+
    "\3\0\37\3\13\0\1\4\57\0\1\6\60\0\1\35"+
    "\46\0\3\3\3\0\2\3\1\36\1\3\1\37\2\3"+
    "\1\40\27\3\11\0\3\3\3\0\20\3\1\41\16\3"+
    "\11\0\3\3\3\0\2\3\1\42\4\3\1\43\27\3"+
    "\11\0\3\3\3\0\2\3\1\44\1\3\1\45\2\3"+
    "\1\46\27\3\11\0\3\3\3\0\4\3\1\47\7\3"+
    "\1\50\1\51\21\3\11\0\3\3\3\0\1\3\1\52"+
    "\10\3\1\53\24\3\11\0\3\3\3\0\16\3\1\54"+
    "\20\3\11\0\3\3\3\0\4\3\1\55\11\3\1\56"+
    "\20\3\11\0\3\3\3\0\16\3\1\57\20\3\46\0"+
    "\1\60\61\0\1\61\46\0\1\62\70\0\1\63\55\0"+
    "\1\64\55\0\1\65\55\0\1\66\55\0\1\67\3\0"+
    "\1\70\51\0\1\71\4\0\1\72\50\0\1\73\20\0"+
    "\1\74\45\0\3\3\3\0\3\3\1\75\33\3\11\0"+
    "\3\3\3\0\23\3\1\76\13\3\11\0\3\3\3\0"+
    "\1\3\1\77\7\3\1\100\25\3\11\0\3\3\3\0"+
    "\4\3\1\101\32\3\11\0\3\3\3\0\16\3\1\102"+
    "\20\3\11\0\3\3\3\0\21\3\1\103\15\3\11\0"+
    "\3\3\3\0\1\3\1\104\35\3\11\0\3\3\3\0"+
    "\15\3\1\105\21\3\11\0\3\3\3\0\15\3\1\106"+
    "\7\3\1\107\11\3\11\0\3\3\3\0\15\3\1\110"+
    "\21\3\11\0\3\3\3\0\1\3\1\111\35\3\11\0"+
    "\3\3\3\0\7\3\1\112\27\3\11\0\3\3\3\0"+
    "\17\3\1\113\17\3\11\0\3\3\3\0\17\3\1\114"+
    "\17\3\11\0\3\3\3\0\11\3\1\115\25\3\11\0"+
    "\3\3\3\0\3\3\1\116\33\3\11\0\3\3\3\0"+
    "\6\3\1\117\30\3\11\0\3\3\3\0\17\3\1\120"+
    "\17\3\53\0\1\121\55\0\1\122\50\0\1\123\31\0"+
    "\1\124\44\0\3\3\3\0\15\3\1\125\21\3\11\0"+
    "\3\3\3\0\4\3\1\126\32\3\11\0\3\3\3\0"+
    "\13\3\1\127\23\3\11\0\3\3\3\0\23\3\1\130"+
    "\13\3\11\0\3\3\3\0\1\3\1\131\35\3\11\0"+
    "\3\3\3\0\1\3\1\132\35\3\11\0\3\3\3\0"+
    "\4\3\1\133\32\3\11\0\3\3\3\0\7\3\1\134"+
    "\27\3\11\0\3\3\3\0\2\3\1\135\34\3\11\0"+
    "\3\3\3\0\17\3\1\136\17\3\11\0\3\3\3\0"+
    "\6\3\1\137\30\3\11\0\3\3\3\0\12\3\1\140"+
    "\24\3\11\0\3\3\3\0\3\3\1\141\33\3\11\0"+
    "\3\3\3\0\17\3\1\142\17\3\11\0\3\3\3\0"+
    "\6\3\1\143\7\3\1\144\20\3\11\0\3\3\3\0"+
    "\4\3\1\145\32\3\11\0\3\3\3\0\23\3\1\146"+
    "\13\3\11\0\3\3\3\0\2\3\1\147\34\3\11\0"+
    "\3\3\3\0\21\3\1\150\15\3\11\0\3\3\3\0"+
    "\16\3\1\151\20\3\55\0\1\152\54\0\1\153\20\0"+
    "\1\154\57\0\1\155\45\0\3\3\3\0\7\3\1\156"+
    "\27\3\11\0\3\3\3\0\3\3\1\157\33\3\11\0"+
    "\3\3\3\0\2\3\1\160\34\3\11\0\3\3\3\0"+
    "\6\3\1\161\5\3\1\162\22\3\11\0\3\3\3\0"+
    "\30\3\1\163\6\3\11\0\3\3\3\0\17\3\1\164"+
    "\17\3\11\0\3\3\3\0\15\3\1\165\21\3\11\0"+
    "\3\3\3\0\21\3\1\166\15\3\11\0\3\3\3\0"+
    "\4\3\1\167\32\3\11\0\3\3\3\0\16\3\1\170"+
    "\20\3\11\0\3\3\3\0\7\3\1\171\27\3\11\0"+
    "\3\3\3\0\2\3\1\172\34\3\11\0\3\3\3\0"+
    "\4\3\1\173\32\3\11\0\3\3\3\0\4\3\1\174"+
    "\32\3\11\0\3\3\3\0\6\3\1\175\30\3\11\0"+
    "\3\3\3\0\21\3\1\176\15\3\11\0\3\3\3\0"+
    "\7\3\1\177\27\3\11\0\3\3\3\0\4\3\1\200"+
    "\32\3\11\0\3\3\3\0\4\3\1\201\32\3\11\0"+
    "\3\3\3\0\1\3\1\202\1\3\1\203\33\3\43\0"+
    "\1\204\53\0\1\205\37\0\1\206\43\0\3\3\3\0"+
    "\2\3\1\207\34\3\11\0\3\3\3\0\10\3\1\210"+
    "\26\3\11\0\3\3\3\0\2\3\1\211\34\3\11\0"+
    "\3\3\3\0\16\3\1\212\20\3\11\0\3\3\3\0"+
    "\4\3\1\213\32\3\11\0\3\3\3\0\6\3\1\214"+
    "\30\3\11\0\3\3\3\0\2\3\1\215\34\3\11\0"+
    "\3\3\3\0\4\3\1\216\32\3\11\0\3\3\3\0"+
    "\6\3\1\217\30\3\11\0\3\3\3\0\3\3\1\220"+
    "\33\3\11\0\3\3\3\0\7\3\1\221\27\3\11\0"+
    "\3\3\3\0\1\3\1\222\35\3\11\0\3\3\3\0"+
    "\21\3\1\223\15\3\11\0\3\3\3\0\7\3\1\224"+
    "\27\3\11\0\3\3\3\0\7\3\1\225\27\3\11\0"+
    "\3\3\3\0\6\3\1\226\30\3\11\0\3\3\3\0"+
    "\6\3\1\227\30\3\11\0\3\3\3\0\21\3\1\230"+
    "\15\3\11\0\3\3\3\0\16\3\1\231\20\3\11\0"+
    "\3\3\3\0\17\3\1\232\17\3\41\0\1\233\57\0"+
    "\1\234\36\0\1\235\42\0\3\3\3\0\21\3\1\236"+
    "\15\3\11\0\3\3\3\0\11\3\1\237\25\3\11\0"+
    "\3\3\3\0\6\3\1\240\30\3\11\0\3\3\3\0"+
    "\6\3\1\241\30\3\11\0\3\3\3\0\4\3\1\242"+
    "\32\3\11\0\3\3\3\0\21\3\1\243\15\3\11\0"+
    "\3\3\3\0\22\3\1\244\14\3\11\0\3\3\3\0"+
    "\26\3\1\245\10\3\11\0\3\3\3\0\14\3\1\246"+
    "\22\3\11\0\3\3\3\0\1\3\1\247\35\3\11\0"+
    "\3\3\3\0\17\3\1\250\17\3\11\0\3\3\3\0"+
    "\4\3\1\251\32\3\11\0\3\3\3\0\27\3\1\252"+
    "\1\3\1\253\5\3\11\0\3\3\3\0\2\3\1\254"+
    "\34\3\11\0\3\3\3\0\26\3\1\255\10\3\11\0"+
    "\3\3\3\0\6\3\1\256\30\3\11\0\3\3\3\0"+
    "\4\3\1\257\32\3\43\0\1\260\37\0\1\261\41\0"+
    "\3\3\3\0\4\3\1\262\32\3\11\0\3\3\3\0"+
    "\2\3\1\263\34\3\11\0\3\3\3\0\17\3\1\264"+
    "\17\3\11\0\3\3\3\0\12\3\1\265\24\3\11\0"+
    "\3\3\3\0\4\3\1\266\32\3\11\0\3\3\3\0"+
    "\4\3\1\267\32\3\11\0\3\3\3\0\7\3\1\270"+
    "\27\3\11\0\3\3\3\0\23\3\1\271\13\3\11\0"+
    "\3\3\3\0\16\3\1\272\20\3\11\0\3\3\3\0"+
    "\22\3\1\273\14\3\11\0\3\3\3\0\2\3\1\274"+
    "\34\3\11\0\3\3\3\0\1\3\1\275\35\3\11\0"+
    "\3\3\3\0\30\3\1\276\6\3\11\0\3\3\3\0"+
    "\4\3\1\277\2\3\1\300\27\3\11\0\3\3\3\0"+
    "\6\3\1\301\30\3\26\0\1\302\40\0\3\3\3\0"+
    "\21\3\1\303\15\3\11\0\3\3\3\0\6\3\1\304"+
    "\30\3\11\0\3\3\3\0\4\3\1\305\32\3\11\0"+
    "\3\3\3\0\21\3\1\306\15\3\11\0\3\3\3\0"+
    "\17\3\1\307\17\3\11\0\3\3\3\0\1\3\1\310"+
    "\35\3\11\0\3\3\3\0\7\3\1\311\27\3\11\0"+
    "\3\3\3\0\4\3\1\312\32\3\11\0\3\3\3\0"+
    "\1\3\1\313\35\3\11\0\3\3\3\0\16\3\1\314"+
    "\20\3\11\0\3\3\3\0\4\3\1\315\32\3\11\0"+
    "\3\3\3\0\11\3\1\316\25\3\11\0\3\3\3\0"+
    "\1\3\1\317\35\3\11\0\3\3\3\0\5\3\1\320"+
    "\20\3\1\321\3\3\1\322\4\3\27\0\1\323\37\0"+
    "\3\3\3\0\26\3\1\324\10\3\11\0\3\3\3\0"+
    "\24\3\1\325\1\3\1\326\10\3\11\0\3\3\3\0"+
    "\32\3\1\327\4\3\11\0\3\3\3\0\7\3\1\330"+
    "\27\3\11\0\3\3\3\0\17\3\1\331\17\3\11\0"+
    "\3\3\3\0\17\3\1\332\17\3\11\0\3\3\3\0"+
    "\16\3\1\333\20\3\11\0\3\3\3\0\6\3\1\334"+
    "\30\3\11\0\3\3\3\0\21\3\1\335\15\3\11\0"+
    "\3\3\3\0\2\3\1\336\34\3\11\0\3\3\3\0"+
    "\17\3\1\337\17\3\11\0\3\3\3\0\4\3\1\340"+
    "\32\3\11\0\3\3\3\0\7\3\1\341\27\3\11\0"+
    "\3\3\3\0\16\3\1\342\20\3\25\0\1\343\41\0"+
    "\3\3\3\0\7\3\1\344\27\3\11\0\3\3\3\0"+
    "\25\3\1\345\11\3\11\0\3\3\3\0\16\3\1\346"+
    "\20\3\11\0\3\3\3\0\16\3\1\347\20\3\11\0"+
    "\3\3\3\0\16\3\1\350\20\3\11\0\3\3\3\0"+
    "\7\3\1\351\27\3\11\0\3\3\3\0\4\3\1\352"+
    "\32\3\11\0\3\3\3\0\10\3\1\353\26\3\11\0"+
    "\3\3\3\0\7\3\1\354\27\3\11\0\3\3\3\0"+
    "\7\3\1\355\27\3\11\0\3\3\3\0\16\3\1\356"+
    "\20\3\11\0\3\3\3\0\6\3\1\357\30\3\11\0"+
    "\3\3\3\0\1\3\1\360\35\3\11\0\3\3\3\0"+
    "\1\3\1\361\35\3\23\0\1\362\43\0\3\3\3\0"+
    "\1\3\1\363\35\3\11\0\3\3\3\0\2\3\1\364"+
    "\34\3\11\0\3\3\3\0\6\3\1\365\30\3\11\0"+
    "\3\3\3\0\1\3\1\366\35\3\11\0\3\3\3\0"+
    "\1\3\1\367\35\3\11\0\3\3\3\0\2\3\1\370"+
    "\34\3\11\0\3\3\3\0\6\3\1\371\30\3\11\0"+
    "\3\3\3\0\1\3\1\372\35\3\11\0\3\3\3\0"+
    "\1\3\1\373\35\3\11\0\3\3\3\0\4\3\1\374"+
    "\32\3\11\0\3\3\3\0\17\3\1\375\17\3\11\0"+
    "\3\3\3\0\12\3\1\376\24\3\30\0\1\377\36\0"+
    "\3\3\3\0\17\3\1\u0100\17\3\11\0\3\3\3\0"+
    "\16\3\1\u0101\20\3\11\0\3\3\3\0\6\3\1\u0102"+
    "\30\3\11\0\3\3\3\0\12\3\1\u0103\24\3\11\0"+
    "\3\3\3\0\16\3\1\u0104\20\3\11\0\3\3\3\0"+
    "\4\3\1\u0105\32\3\11\0\3\3\3\0\16\3\1\u0106"+
    "\20\3\11\0\3\3\3\0\21\3\1\u0107\15\3\11\0"+
    "\3\3\3\0\16\3\1\u0108\20\3\11\0\3\3\3\0"+
    "\7\3\1\u0109\27\3\23\0\1\u010a\43\0\3\3\3\0"+
    "\16\3\1\u010b\20\3\11\0\3\3\3\0\6\3\1\u010c"+
    "\30\3\11\0\3\3\3\0\4\3\1\u010d\32\3\11\0"+
    "\3\3\3\0\7\3\1\u010e\27\3\11\0\3\3\3\0"+
    "\21\3\1\u010f\15\3\11\0\3\3\3\0\21\3\1\u0110"+
    "\15\3\11\0\3\3\3\0\4\3\1\u0111\32\3\11\0"+
    "\3\3\3\0\1\3\1\u0112\35\3\11\0\3\3\3\0"+
    "\6\3\1\u0113\30\3\11\0\3\3\3\0\1\3\1\u0114"+
    "\35\3\11\0\3\3\3\0\17\3\1\u0115\17\3\11\0"+
    "\3\3\3\0\21\3\1\u0116\15\3\11\0\3\3\3\0"+
    "\6\3\1\u0117\30\3\11\0\3\3\3\0\7\3\1\u0118"+
    "\27\3\11\0\3\3\3\0\7\3\1\u0119\27\3\11\0"+
    "\3\3\3\0\16\3\1\u011a\20\3\11\0\3\3\3\0"+
    "\16\3\1\u011b\20\3\11\0\3\3\3\0\4\3\1\u011c"+
    "\32\3\11\0\3\3\3\0\4\3\1\u011d\32\3\11\0"+
    "\3\3\3\0\6\3\1\u011e\30\3\11\0\3\3\3\0"+
    "\6\3\1\u011f\30\3\11\0\3\3\3\0\21\3\1\u0120"+
    "\15\3\11\0\3\3\3\0\21\3\1\u0121\15\3\11\0"+
    "\3\3\3\0\7\3\1\u0122\27\3\11\0\3\3\3\0"+
    "\7\3\1\u0123\27\3\11\0\3\3\3\0\6\3\1\u0124"+
    "\30\3\11\0\3\3\3\0\6\3\1\u0125\30\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11454];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\25\1\1\11\1\0\22\1"+
    "\3\0\11\11\1\0\24\1\4\0\25\1\1\11\3\0"+
    "\26\1\3\0\24\1\1\0\1\11\1\0\22\1\1\11"+
    "\1\0\20\1\1\0\20\1\1\0\17\1\1\0\16\1"+
    "\1\0\14\1\1\0\12\1\1\11\33\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
    private int contador;
    private ArrayList<Yytoken> tokens;
    private ArrayList<String> errores;

	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				System.out.println(t);
				out.write(t + "\n");
			}
			out.close();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
        errores = new ArrayList<>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
        //System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
                if(Character.isUpperCase(yytext().charAt(0))){
                errores.add("Los identificadores no pueden comenzar con mayuscula < "+ yytext() +" >");
                }
                else
                {
                    
                }
            }
          case 55: break;
          case 2: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"id",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 56: break;
          case 3: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 57: break;
          case 4: 
            { //ignorar
            }
          case 58: break;
          case 5: 
            { contador++;
    Yytoken t = new Yytoken(contador,"","fin_linea",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 59: break;
          case 6: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"asignacion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 60: break;
          case 7: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"menor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 61: break;
          case 8: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mayor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 62: break;
          case 9: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 63: break;
          case 10: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 64: break;
          case 11: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multiplicacion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 65: break;
          case 12: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"division",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 66: break;
          case 13: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"si",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 67: break;
          case 14: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comparacion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 68: break;
          case 15: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"menor_igual",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 69: break;
          case 16: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mayor_igual",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 70: break;
          case 17: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"diferente_de",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 71: break;
          case 18: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma_asigna",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 72: break;
          case 19: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"incremento",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 73: break;
          case 20: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta_asigna",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 74: break;
          case 21: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"decremento",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 75: break;
          case 22: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multipli_asinga",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 76: break;
          case 23: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"sino",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 77: break;
          case 24: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ALTO",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 78: break;
          case 25: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ciclo",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 79: break;
          case 26: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"falso",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 80: break;
          case 27: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"config",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 81: break;
          case 28: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"entero",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 82: break;
          case 29: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"verdad",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 83: break;
          case 30: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SALIDA",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 84: break;
          case 31: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"avanzar",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 85: break;
          case 32: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"funcion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 86: break;
          case 33: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detener",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 87: break;
          case 34: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ENTRADA",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 88: break;
          case 35: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mientras",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 89: break;
          case 36: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"flotante",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 90: break;
          case 37: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comprimir",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 91: break;
          case 38: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"sobrecupo",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 92: break;
          case 39: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"salidaDato",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 93: break;
          case 40: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"entradaDato",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 94: break;
          case 41: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"estadoLinea",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 95: break;
          case 42: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"temporizador",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 96: break;
          case 43: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"vaciarCamion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 97: break;
          case 44: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"estadoEnergia",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 98: break;
          case 45: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IniciaPrograma",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 99: break;
          case 46: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarParada",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 100: break;
          case 47: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarSensor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 101: break;
          case 48: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"modalidadSensor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 102: break;
          case 49: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"compuertaAbierta",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 103: break;
          case 50: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"compuertaCerrada",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 104: break;
          case 51: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"soltarContenedor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 105: break;
          case 52: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"vaciarContenedor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 106: break;
          case 53: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarAnomalia",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 107: break;
          case 54: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"capacidadContenedor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
