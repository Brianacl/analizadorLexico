/* The following code was generated by JFlex 1.6.1 */

package Lex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;
    }

//Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        return "Token #"+numToken+": "+token+" C.Lexico: "+tipo+" ["+linea
        + "," +columna + "]";
    }
}
/* Seccion de opciones y declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lex/alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\0\2\0\1\0\22\0\1\0\1\45\10\0\1\50\1\46"+
    "\1\0\1\47\1\0\1\51\12\1\2\0\1\43\1\42\1\44\2\0"+
    "\1\26\1\0\1\30\1\24\1\33\1\41\2\0\1\2\2\0\1\31"+
    "\1\0\1\35\1\40\1\7\1\0\1\37\1\34\1\36\6\0\4\0"+
    "\1\0\1\0\1\6\1\27\1\5\1\23\1\20\1\15\1\12\1\0"+
    "\1\4\2\0\1\17\1\13\1\3\1\11\1\25\1\0\1\10\1\14"+
    "\1\21\1\16\1\22\3\0\1\32\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff95\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\15\0\1\2\1\3\1\4\1\0\1\5"+
    "\1\6\1\7\1\10\10\0\1\11\17\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\43\0"+
    "\1\23\15\0\1\24\6\0\1\25\12\0\1\26\15\0"+
    "\1\27\3\0\1\30\13\0\1\31\3\0\1\32\4\0"+
    "\1\33\5\0\1\34\5\0\1\35\6\0\1\36\1\0"+
    "\1\37\1\40\5\0\1\41\4\0\1\42\12\0\1\43"+
    "\4\0\1\44\17\0\1\45\21\0\1\46\1\47\17\0"+
    "\1\50\1\51\5\0\1\52\5\0\1\53\4\0\1\54"+
    "\6\0\1\55\1\0\1\56\3\0\1\57\4\0\1\60"+
    "\1\61\1\62\1\63\4\0\1\64\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u024c\0\u0276"+
    "\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372\0\u039c\0\u03c6"+
    "\0\u03f0\0\u041a\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516"+
    "\0\u0540\0\u056a\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666"+
    "\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u039c"+
    "\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c\0\u039c"+
    "\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc"+
    "\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c"+
    "\0\u0a56\0\u0a80\0\u0aaa\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c"+
    "\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0ccc"+
    "\0\u0cf6\0\u0d20\0\u0d4a\0\u039c\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2"+
    "\0\u0e1c\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42"+
    "\0\u0f6c\0\u039c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068"+
    "\0\u039c\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e"+
    "\0\u11b8\0\u11e2\0\u120c\0\u039c\0\u1236\0\u1260\0\u128a\0\u12b4"+
    "\0\u12de\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404"+
    "\0\u142e\0\u039c\0\u1458\0\u1482\0\u14ac\0\u039c\0\u14d6\0\u1500"+
    "\0\u152a\0\u1554\0\u157e\0\u15a8\0\u15d2\0\u15fc\0\u1626\0\u1650"+
    "\0\u167a\0\u039c\0\u16a4\0\u16ce\0\u16f8\0\u039c\0\u1722\0\u174c"+
    "\0\u1776\0\u17a0\0\u039c\0\u17ca\0\u17f4\0\u181e\0\u1848\0\u1872"+
    "\0\u039c\0\u189c\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u039c\0\u196e"+
    "\0\u1998\0\u19c2\0\u19ec\0\u1a16\0\u1a40\0\u039c\0\u1a6a\0\u039c"+
    "\0\u039c\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c\0\u039c\0\u1b66"+
    "\0\u1b90\0\u1bba\0\u1be4\0\u039c\0\u1c0e\0\u1c38\0\u1c62\0\u1c8c"+
    "\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u039c\0\u1db2"+
    "\0\u1ddc\0\u1e06\0\u1e30\0\u039c\0\u1e5a\0\u1e84\0\u1eae\0\u1ed8"+
    "\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe\0\u2028"+
    "\0\u2052\0\u207c\0\u20a6\0\u039c\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e"+
    "\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u039c\0\u039c\0\u239a"+
    "\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea"+
    "\0\u2514\0\u253e\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u039c\0\u039c"+
    "\0\u2610\0\u263a\0\u2664\0\u268e\0\u26b8\0\u039c\0\u26e2\0\u270c"+
    "\0\u2736\0\u2760\0\u278a\0\u039c\0\u27b4\0\u27de\0\u2808\0\u2832"+
    "\0\u039c\0\u285c\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e\0\u039c"+
    "\0\u2958\0\u039c\0\u2982\0\u29ac\0\u29d6\0\u039c\0\u2a00\0\u2a2a"+
    "\0\u2a54\0\u2a7e\0\u039c\0\u039c\0\u039c\0\u039c\0\u2aa8\0\u2ad2"+
    "\0\u2afc\0\u2b26\0\u039c\0\u039c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\2\0\1\4\1\5\4\0\1\6"+
    "\1\7\1\10\2\0\1\11\1\12\1\13\1\14\2\0"+
    "\1\15\4\0\1\16\1\17\5\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\2\53\0"+
    "\1\30\20\0\1\31\31\0\1\32\1\0\1\33\2\0"+
    "\1\34\62\0\1\35\33\0\1\36\4\0\1\37\44\0"+
    "\1\40\1\0\1\41\2\0\1\42\46\0\1\43\7\0"+
    "\1\44\1\45\35\0\1\46\10\0\1\47\55\0\1\50"+
    "\37\0\1\51\11\0\1\52\51\0\1\53\62\0\1\54"+
    "\54\0\1\55\1\56\42\0\1\57\65\0\1\60\51\0"+
    "\1\61\51\0\1\62\51\0\1\63\51\0\1\64\3\0"+
    "\1\65\45\0\1\66\4\0\1\67\44\0\1\70\65\0"+
    "\1\71\100\0\1\72\23\0\1\73\71\0\1\74\27\0"+
    "\1\75\7\0\1\76\44\0\1\77\63\0\1\100\54\0"+
    "\1\101\31\0\1\102\65\0\1\103\51\0\1\104\7\0"+
    "\1\105\41\0\1\106\35\0\1\107\57\0\1\110\61\0"+
    "\1\111\51\0\1\112\43\0\1\113\43\0\1\114\54\0"+
    "\1\115\62\0\1\116\66\0\1\117\22\0\1\120\100\0"+
    "\1\121\44\0\1\122\25\0\1\123\101\0\1\124\33\0"+
    "\1\125\40\0\1\126\60\0\1\127\61\0\1\130\27\0"+
    "\1\131\51\0\1\132\54\0\1\133\54\0\1\134\44\0"+
    "\1\135\66\0\1\136\40\0\1\137\55\0\1\140\42\0"+
    "\1\141\65\0\1\142\40\0\1\143\7\0\1\144\37\0"+
    "\1\145\70\0\1\146\30\0\1\147\70\0\1\150\46\0"+
    "\1\151\71\0\1\152\37\0\1\153\62\0\1\154\14\0"+
    "\1\155\33\0\1\156\17\0\1\157\103\0\1\160\24\0"+
    "\1\161\45\0\1\162\50\0\1\163\55\0\1\164\5\0"+
    "\1\165\65\0\1\166\40\0\1\167\47\0\1\170\55\0"+
    "\1\171\34\0\1\172\63\0\1\173\42\0\1\174\44\0"+
    "\1\175\53\0\1\176\51\0\1\177\53\0\1\200\64\0"+
    "\1\201\37\0\1\202\46\0\1\203\51\0\1\204\46\0"+
    "\1\205\1\0\1\206\74\0\1\207\47\0\1\210\47\0"+
    "\1\211\65\0\1\212\17\0\1\213\45\0\1\214\53\0"+
    "\1\215\57\0\1\216\43\0\1\217\65\0\1\220\37\0"+
    "\1\221\53\0\1\222\45\0\1\223\53\0\1\224\53\0"+
    "\1\225\46\0\1\226\55\0\1\227\43\0\1\230\71\0"+
    "\1\231\37\0\1\232\51\0\1\233\50\0\1\234\51\0"+
    "\1\235\64\0\1\236\46\0\1\237\52\0\1\240\32\0"+
    "\1\241\73\0\1\242\53\0\1\243\32\0\1\244\103\0"+
    "\1\245\33\0\1\246\41\0\1\247\46\0\1\250\51\0"+
    "\1\251\47\0\1\252\66\0\1\253\52\0\1\254\55\0"+
    "\1\255\37\0\1\256\36\0\1\257\67\0\1\260\36\0"+
    "\1\261\74\0\1\262\1\0\1\263\22\0\1\264\75\0"+
    "\1\265\31\0\1\266\47\0\1\267\103\0\1\270\37\0"+
    "\1\271\33\0\1\272\43\0\1\273\55\0\1\274\47\0"+
    "\1\275\66\0\1\276\44\0\1\277\43\0\1\300\51\0"+
    "\1\301\54\0\1\302\65\0\1\303\44\0\1\304\55\0"+
    "\1\305\31\0\1\306\50\0\1\307\100\0\1\310\25\0"+
    "\1\311\2\0\1\312\50\0\1\313\52\0\1\314\70\0"+
    "\1\315\44\0\1\316\36\0\1\317\47\0\1\320\66\0"+
    "\1\321\47\0\1\322\33\0\1\323\57\0\1\324\46\0"+
    "\1\325\46\0\1\326\66\0\1\327\37\0\1\330\56\0"+
    "\1\331\41\0\1\332\55\0\1\333\20\0\1\334\3\0"+
    "\1\335\27\0\1\336\65\0\1\337\53\0\1\340\47\0"+
    "\1\341\1\0\1\342\55\0\1\343\26\0\1\344\61\0"+
    "\1\345\51\0\1\346\50\0\1\347\41\0\1\350\64\0"+
    "\1\351\32\0\1\352\66\0\1\353\36\0\1\354\54\0"+
    "\1\355\60\0\1\356\41\0\1\357\65\0\1\360\36\0"+
    "\1\361\67\0\1\362\42\0\1\363\51\0\1\364\51\0"+
    "\1\365\42\0\1\366\46\0\1\367\55\0\1\370\50\0"+
    "\1\371\51\0\1\372\60\0\1\373\41\0\1\374\44\0"+
    "\1\375\51\0\1\376\54\0\1\377\103\0\1\u0100\14\0"+
    "\1\u0101\52\0\1\u0102\55\0\1\u0103\44\0\1\u0104\51\0"+
    "\1\u0105\52\0\1\u0106\55\0\1\u0107\44\0\1\u0108\51\0"+
    "\1\u0109\54\0\1\u010a\64\0\1\u010b\44\0\1\u010c\50\0"+
    "\1\u010d\75\0\1\u010e\33\0\1\u010f\50\0\1\u0110\41\0"+
    "\1\u0111\55\0\1\u0112\55\0\1\u0113\37\0\1\u0114\63\0"+
    "\1\u0115\54\0\1\u0116\46\0\1\u0117\42\0\1\u0118\46\0"+
    "\1\u0119\63\0\1\u011a\41\0\1\u011b\47\0\1\u011c\54\0"+
    "\1\u011d\63\0\1\u011e\51\0\1\u011f\34\0\1\u0120\46\0"+
    "\1\u0121\56\0\1\u0122\44\0\1\u0123\67\0\1\u0124\53\0"+
    "\1\u0125\36\0\1\u0126\52\0\1\u0127\51\0\1\u0128\60\0"+
    "\1\u0129\51\0\1\u012a\37\0\1\u012b\51\0\1\u012c\53\0"+
    "\1\u012d\51\0\1\u012e\64\0\1\u012f\51\0\1\u0130\37\0"+
    "\1\u0131\51\0\1\u0132\50\0\1\u0133\51\0\1\u0134\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11088];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\15\0\3\1\1\0\3\1\1\11\10\0"+
    "\1\1\17\0\11\11\43\0\1\11\15\0\1\11\6\0"+
    "\1\11\12\0\1\11\15\0\1\11\3\0\1\11\13\0"+
    "\1\11\3\0\1\11\4\0\1\11\5\0\1\11\5\0"+
    "\1\11\6\0\1\11\1\0\2\11\5\0\1\11\4\0"+
    "\1\11\12\0\1\11\4\0\1\11\17\0\1\11\21\0"+
    "\2\11\17\0\2\11\5\0\1\11\5\0\1\11\4\0"+
    "\1\11\6\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\4\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[308];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	
    private int contador;
    private ArrayList<Yytoken> tokens;

	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				System.out.println(t);
				out.write(t + "\n");
			}
			out.close();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
	tokens = new ArrayList<Yytoken>();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
        System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 54: break;
          case 2: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"asignacion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 55: break;
          case 3: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"menor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 56: break;
          case 4: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mayor_que",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 57: break;
          case 5: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 58: break;
          case 6: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 59: break;
          case 7: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multiplicacion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 60: break;
          case 8: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"division",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 61: break;
          case 9: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"si",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 62: break;
          case 10: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comparacion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 63: break;
          case 11: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"menor_igual",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 64: break;
          case 12: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mayor_igual",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 65: break;
          case 13: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"diferente_de",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 66: break;
          case 14: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma_asigna",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 67: break;
          case 15: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"incremento",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 68: break;
          case 16: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta_asigna",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 69: break;
          case 17: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"decremento",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 70: break;
          case 18: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multipli_asinga",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 71: break;
          case 19: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"sino",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 72: break;
          case 20: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ALTO",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 73: break;
          case 21: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ciclo",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 74: break;
          case 22: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"falso",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 75: break;
          case 23: 
            { contador++;
    Yytoken t = new Yytoken(contador,"","fin_linea",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 76: break;
          case 24: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"config",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 77: break;
          case 25: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"entero",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 78: break;
          case 26: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"verdad",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 79: break;
          case 27: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SALIDA",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 80: break;
          case 28: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"avanzar",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 81: break;
          case 29: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"funcion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 82: break;
          case 30: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detener",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 83: break;
          case 31: 
            { //ignorar
            }
          case 84: break;
          case 32: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ENTRADA",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 85: break;
          case 33: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mientras",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 86: break;
          case 34: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"flotante",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 87: break;
          case 35: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comprimir",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 88: break;
          case 36: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"sobrecupo",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 89: break;
          case 37: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"salidaDato",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 90: break;
          case 38: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"entradaDato",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 91: break;
          case 39: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"estadoLinea",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 92: break;
          case 40: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"temporizador",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 93: break;
          case 41: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"vaciarCamion",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 94: break;
          case 42: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"id",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 95: break;
          case 43: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"estadoEnergia",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 96: break;
          case 44: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IniciaPrograma",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 97: break;
          case 45: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarParada",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 98: break;
          case 46: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarSensor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 99: break;
          case 47: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"modalidadSensor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 100: break;
          case 48: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"compuertaAbierta",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 101: break;
          case 49: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"compuertaCerrada",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 102: break;
          case 50: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"soltarContenedor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 103: break;
          case 51: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"vaciarContenedor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 104: break;
          case 52: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarAnomalia",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 105: break;
          case 53: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"capacidadContenedor",yyline,yycolumn);
    tokens.add(t);
    return t;
            }
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
