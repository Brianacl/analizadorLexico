/* The following code was generated by JFlex 1.6.1 */

package Lex;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

//clase de los token devueltos
class Yytoken {
    Yytoken (int numToken,String token, String tipo, int linea, int columna, boolean error){
        //Contador para el número de tokens reconocidos
        this.numToken = numToken;
        //String del token reconocido
        this.token = new String(token);
        //Tipo de componente léxico encontrado
        this.tipo = tipo;
        //Número de linea
        this.linea = linea;
        //Columna donde empieza el primer carácter del token
        this.columna = columna;

        this.error = error;
    }

//Métodos de los atributos de la clase
    public int numToken;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    public boolean error;
    //Metodo que devuelve los datos necesarios que escribiremos en un archive de salida
    public String toString() {
        if(error){
            return tipo+" < "+token+" > | [Linea: "+linea+", columna: " +columna + "]";
        }
        return "Token #"+numToken+": "+token+" | Componente léxico: "+tipo+" [Linea: "+linea+", columna: " +columna + "]";
    }
}//Fin clase Yytoken
/* Seccion de opciones y declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/lex/alexico.flex</tt>
 */
public class AnalizadorLexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\4\1\6\1\6\1\5\22\0\1\11\1\54\1\0"+
    "\1\12\1\0\1\12\1\63\1\12\2\0\1\56\1\55\1\12\1\1"+
    "\1\12\1\57\12\3\1\0\1\60\1\52\1\51\1\53\2\12\1\37"+
    "\1\2\1\41\1\35\1\7\3\2\1\14\2\2\1\42\1\2\1\45"+
    "\1\50\1\21\1\2\1\47\1\44\1\46\6\2\4\0\1\2\1\0"+
    "\1\20\1\40\1\17\1\34\1\10\1\27\1\24\1\2\1\16\2\2"+
    "\1\31\1\25\1\15\1\23\1\36\1\2\1\22\1\26\1\32\1\30"+
    "\1\33\3\2\1\43\1\61\1\64\1\62\7\0\1\6\71\0\1\12"+
    "\u1f68\0\1\6\1\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\2\3\1\6"+
    "\1\7\13\3\1\10\1\11\1\12\1\7\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\7\1\1\1\21\1\22"+
    "\2\0\12\3\1\23\13\3\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\0\30\3"+
    "\1\0\1\36\14\3\1\37\12\3\1\40\6\3\1\41"+
    "\12\3\1\42\11\3\1\43\4\3\1\44\17\3\1\45"+
    "\1\46\7\3\1\47\5\3\1\50\4\3\1\51\10\3"+
    "\1\52\4\3\1\53\12\3\1\54\4\3\1\55\1\3"+
    "\1\56\15\3\1\57\7\3\1\60\1\3\1\61\23\3"+
    "\1\62\1\63\4\3\1\64\12\3\1\65\6\3\1\66"+
    "\1\3\1\67\3\3\1\70\4\3\1\71\1\72\1\73"+
    "\1\74\4\3\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\u0173\0\65\0\65\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c"+
    "\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424"+
    "\0\u0459\0\u048e\0\u04c3\0\u04f8\0\65\0\65\0\65\0\65"+
    "\0\u052d\0\u0562\0\65\0\65\0\u0597\0\u05cc\0\u0601\0\u0636"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\65\0\u0a8f\0\u0ac4\0\u0af9"+
    "\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u0ac4\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\237\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\237\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\237"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\237\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\237\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\237\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66"+
    "\0\u1d9b\0\237\0\237\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4"+
    "\0\u1ed9\0\u1f0e\0\237\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017"+
    "\0\237\0\u204c\0\u2081\0\u20b6\0\u20eb\0\237\0\u2120\0\u2155"+
    "\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\237\0\u22c8"+
    "\0\u22fd\0\u2332\0\u2367\0\237\0\u239c\0\u23d1\0\u2406\0\u243b"+
    "\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579\0\237\0\u25ae"+
    "\0\u25e3\0\u2618\0\u264d\0\237\0\u2682\0\237\0\u26b7\0\u26ec"+
    "\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f\0\u2894"+
    "\0\u28c9\0\u28fe\0\u2933\0\237\0\u2968\0\u299d\0\u29d2\0\u2a07"+
    "\0\u2a3c\0\u2a71\0\u2aa6\0\237\0\u2adb\0\237\0\u2b10\0\u2b45"+
    "\0\u2b7a\0\u2baf\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced"+
    "\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95"+
    "\0\u2eca\0\237\0\237\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\237"+
    "\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7\0\u30dc\0\u3111\0\u3146"+
    "\0\u317b\0\u31b0\0\237\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9"+
    "\0\u32ee\0\237\0\u3323\0\237\0\u3358\0\u338d\0\u33c2\0\237"+
    "\0\u33f7\0\u342c\0\u3461\0\u3496\0\237\0\237\0\237\0\237"+
    "\0\u34cb\0\u3500\0\u3535\0\u356a\0\237\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\6\1\14\2\4\1\15\1\16"+
    "\4\4\1\17\1\20\1\21\2\4\1\22\1\23\1\24"+
    "\2\4\1\25\4\4\1\26\4\4\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\66\0\1\43\1\0\1\5\45\0\1\44\15\0"+
    "\2\4\3\0\2\4\3\0\35\4\14\0\3\45\1\5"+
    "\3\0\2\46\54\45\4\0\1\6\62\0\2\4\3\0"+
    "\2\4\3\0\31\4\1\47\3\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\50\10\4\1\51\22\4\16\0"+
    "\2\4\3\0\2\4\3\0\1\4\1\52\33\4\16\0"+
    "\2\4\3\0\2\4\3\0\2\4\1\53\1\4\1\54"+
    "\2\4\1\55\25\4\16\0\2\4\3\0\2\4\3\0"+
    "\17\4\1\56\15\4\16\0\2\4\3\0\2\4\3\0"+
    "\2\4\1\57\4\4\1\60\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\2\4\1\61\1\4\1\62\2\4\1\63"+
    "\25\4\16\0\2\4\3\0\2\4\3\0\4\4\1\64"+
    "\7\4\1\65\1\66\17\4\16\0\2\4\3\0\1\4"+
    "\1\67\3\0\35\4\16\0\2\4\3\0\1\4\1\70"+
    "\3\0\4\4\1\71\30\4\16\0\2\4\3\0\1\4"+
    "\1\72\3\0\35\4\16\0\2\4\3\0\2\4\3\0"+
    "\26\4\1\73\6\4\16\0\2\4\3\0\2\4\3\0"+
    "\23\4\1\74\11\4\65\0\1\75\64\0\1\76\64\0"+
    "\1\77\64\0\1\100\16\0\1\5\45\0\1\101\3\0"+
    "\1\102\60\0\1\103\76\0\1\104\65\0\1\105\3\0"+
    "\1\106\62\0\1\107\1\0\1\106\51\0\1\107\11\0"+
    "\2\4\3\0\2\4\3\0\32\4\1\110\2\4\16\0"+
    "\2\4\3\0\2\4\3\0\16\4\1\111\16\4\16\0"+
    "\2\4\3\0\2\4\3\0\16\4\1\112\16\4\16\0"+
    "\2\4\3\0\2\4\3\0\2\4\1\113\32\4\16\0"+
    "\2\4\3\0\2\4\3\0\3\4\1\114\31\4\16\0"+
    "\2\4\3\0\2\4\3\0\22\4\1\115\12\4\16\0"+
    "\2\4\3\0\2\4\3\0\1\4\1\116\7\4\1\117"+
    "\23\4\16\0\2\4\3\0\2\4\3\0\4\4\1\120"+
    "\30\4\16\0\2\4\3\0\1\4\1\121\3\0\35\4"+
    "\16\0\2\4\3\0\2\4\3\0\20\4\1\122\14\4"+
    "\16\0\2\4\3\0\2\4\3\0\1\4\1\123\33\4"+
    "\16\0\2\4\3\0\2\4\3\0\15\4\1\124\17\4"+
    "\16\0\2\4\3\0\2\4\3\0\15\4\1\125\6\4"+
    "\1\126\10\4\16\0\2\4\3\0\2\4\3\0\15\4"+
    "\1\127\17\4\16\0\2\4\3\0\2\4\3\0\1\4"+
    "\1\130\33\4\16\0\2\4\3\0\2\4\3\0\7\4"+
    "\1\131\25\4\16\0\2\4\3\0\2\4\3\0\11\4"+
    "\1\132\23\4\16\0\2\4\3\0\2\4\3\0\6\4"+
    "\1\133\26\4\16\0\2\4\3\0\2\4\3\0\3\4"+
    "\1\134\31\4\16\0\2\4\3\0\2\4\3\0\16\4"+
    "\1\135\16\4\16\0\2\4\3\0\2\4\3\0\32\4"+
    "\1\136\2\4\16\0\2\4\3\0\2\4\3\0\26\4"+
    "\1\137\6\4\17\0\1\106\3\0\2\140\57\0\1\141"+
    "\63\0\2\4\3\0\2\4\3\0\33\4\1\142\1\4"+
    "\16\0\2\4\3\0\1\4\1\143\3\0\6\4\1\144"+
    "\26\4\16\0\2\4\3\0\2\4\3\0\4\4\1\145"+
    "\30\4\16\0\2\4\3\0\2\4\3\0\3\4\1\146"+
    "\31\4\16\0\2\4\3\0\2\4\3\0\15\4\1\147"+
    "\17\4\16\0\2\4\3\0\2\4\3\0\4\4\1\150"+
    "\30\4\16\0\2\4\3\0\2\4\3\0\13\4\1\151"+
    "\21\4\16\0\2\4\3\0\2\4\3\0\22\4\1\152"+
    "\12\4\16\0\2\4\3\0\2\4\3\0\1\4\1\153"+
    "\33\4\16\0\2\4\3\0\2\4\3\0\1\4\1\154"+
    "\33\4\16\0\2\4\3\0\2\4\3\0\4\4\1\155"+
    "\30\4\16\0\2\4\3\0\2\4\3\0\7\4\1\156"+
    "\25\4\16\0\2\4\3\0\2\4\3\0\2\4\1\157"+
    "\32\4\16\0\2\4\3\0\2\4\3\0\16\4\1\160"+
    "\16\4\16\0\2\4\3\0\2\4\3\0\6\4\1\161"+
    "\26\4\16\0\2\4\3\0\2\4\3\0\12\4\1\162"+
    "\22\4\16\0\2\4\3\0\2\4\3\0\3\4\1\163"+
    "\31\4\16\0\2\4\3\0\2\4\3\0\16\4\1\164"+
    "\16\4\16\0\2\4\3\0\2\4\3\0\22\4\1\165"+
    "\12\4\16\0\2\4\3\0\2\4\3\0\20\4\1\166"+
    "\14\4\16\0\2\4\3\0\2\4\3\0\2\4\1\167"+
    "\32\4\16\0\2\4\3\0\1\4\1\170\3\0\35\4"+
    "\16\0\2\4\3\0\2\4\3\0\34\4\1\171\16\0"+
    "\2\4\3\0\2\4\3\0\1\172\34\4\15\0\1\107"+
    "\1\0\1\141\51\0\1\107\11\0\2\4\3\0\2\4"+
    "\3\0\23\4\1\173\11\4\16\0\2\4\3\0\2\4"+
    "\3\0\6\4\1\174\26\4\16\0\2\4\3\0\2\4"+
    "\3\0\4\4\1\175\30\4\16\0\2\4\3\0\2\4"+
    "\3\0\20\4\1\176\14\4\16\0\2\4\3\0\2\4"+
    "\3\0\2\4\1\177\32\4\16\0\2\4\3\0\2\4"+
    "\3\0\7\4\1\200\25\4\16\0\2\4\3\0\2\4"+
    "\3\0\3\4\1\201\31\4\16\0\2\4\3\0\2\4"+
    "\3\0\2\4\1\202\32\4\16\0\2\4\3\0\2\4"+
    "\3\0\6\4\1\203\5\4\1\204\20\4\16\0\2\4"+
    "\3\0\2\4\3\0\27\4\1\205\5\4\16\0\2\4"+
    "\3\0\2\4\3\0\16\4\1\206\16\4\16\0\2\4"+
    "\3\0\2\4\3\0\15\4\1\207\17\4\16\0\2\4"+
    "\3\0\2\4\3\0\20\4\1\210\14\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\211\30\4\16\0\2\4"+
    "\3\0\1\4\1\212\3\0\35\4\16\0\2\4\3\0"+
    "\2\4\3\0\7\4\1\213\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\2\4\1\214\32\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\215\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\7\4\1\216\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\217\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\220\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\221\1\4\1\222\31\4\16\0"+
    "\2\4\3\0\2\4\3\0\21\4\1\223\13\4\16\0"+
    "\2\4\3\0\2\4\3\0\21\4\1\224\13\4\16\0"+
    "\2\4\3\0\2\4\3\0\7\4\1\225\25\4\16\0"+
    "\2\4\3\0\2\4\3\0\20\4\1\226\14\4\16\0"+
    "\2\4\3\0\2\4\3\0\7\4\1\227\25\4\16\0"+
    "\2\4\3\0\2\4\3\0\4\4\1\230\30\4\16\0"+
    "\2\4\3\0\2\4\3\0\2\4\1\231\32\4\16\0"+
    "\2\4\3\0\2\4\3\0\10\4\1\232\24\4\16\0"+
    "\2\4\3\0\2\4\3\0\2\4\1\233\32\4\16\0"+
    "\2\4\3\0\1\4\1\234\3\0\35\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\235\30\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\236\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\2\4\1\237\32\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\240\30\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\241\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\3\4\1\242\31\4\16\0\2\4"+
    "\3\0\2\4\3\0\7\4\1\243\25\4\16\0\2\4"+
    "\3\0\2\4\3\0\1\4\1\244\33\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\245\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\20\4\1\246\14\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\247\26\4\16\0\2\4"+
    "\3\0\1\4\1\250\3\0\35\4\16\0\2\4\3\0"+
    "\2\4\3\0\16\4\1\251\16\4\16\0\2\4\3\0"+
    "\2\4\3\0\23\4\1\252\11\4\16\0\2\4\3\0"+
    "\2\4\3\0\23\4\1\253\11\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\254\30\4\16\0\2\4\3\0"+
    "\1\255\1\4\3\0\26\4\1\256\6\4\16\0\2\4"+
    "\3\0\2\4\3\0\5\4\1\257\27\4\16\0\2\4"+
    "\3\0\2\4\3\0\20\4\1\260\14\4\16\0\2\4"+
    "\3\0\2\4\3\0\11\4\1\261\23\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\262\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\263\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\264\30\4\16\0\2\4"+
    "\3\0\2\4\3\0\20\4\1\265\14\4\16\0\2\4"+
    "\3\0\2\4\3\0\21\4\1\266\13\4\16\0\2\4"+
    "\3\0\2\4\3\0\25\4\1\267\7\4\16\0\2\4"+
    "\3\0\2\4\3\0\14\4\1\270\20\4\16\0\2\4"+
    "\3\0\2\4\3\0\1\4\1\271\33\4\16\0\2\4"+
    "\3\0\2\4\3\0\16\4\1\272\16\4\16\0\2\4"+
    "\3\0\2\4\3\0\2\4\1\273\32\4\16\0\2\4"+
    "\3\0\1\4\1\274\3\0\35\4\16\0\2\4\3\0"+
    "\2\4\3\0\25\4\1\275\7\4\16\0\2\4\3\0"+
    "\2\4\3\0\6\4\1\276\26\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\277\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\21\4\1\300\13\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\301\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\2\4\1\302\32\4\16\0\2\4\3\0"+
    "\2\4\3\0\6\4\1\303\26\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\304\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\2\4\1\305\32\4\16\0\2\4\3\0"+
    "\2\4\3\0\16\4\1\306\16\4\16\0\2\4\3\0"+
    "\2\4\3\0\12\4\1\307\22\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\310\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\311\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\7\4\1\312\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\22\4\1\313\12\4\16\0\2\4\3\0"+
    "\1\4\1\314\3\0\35\4\16\0\2\4\3\0\2\4"+
    "\3\0\27\4\1\315\5\4\16\0\2\4\3\0\2\4"+
    "\3\0\6\4\1\316\26\4\16\0\2\4\3\0\2\4"+
    "\3\0\4\4\1\317\2\4\1\320\25\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\321\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\322\30\4\16\0\2\4"+
    "\3\0\1\4\1\323\3\0\35\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\324\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\7\4\1\325\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\20\4\1\326\14\4\16\0\2\4\3\0"+
    "\2\4\3\0\6\4\1\327\26\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\330\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\20\4\1\331\14\4\16\0\2\4\3\0"+
    "\2\4\3\0\16\4\1\332\16\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\333\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\7\4\1\334\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\335\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\7\4\1\336\25\4\16\0\2\4\3\0"+
    "\2\4\3\0\11\4\1\337\23\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\340\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\5\4\1\341\17\4\1\342\2\4\1\343"+
    "\4\4\16\0\2\4\3\0\2\4\3\0\16\4\1\344"+
    "\16\4\16\0\2\4\3\0\2\4\3\0\6\4\1\345"+
    "\26\4\16\0\2\4\3\0\1\4\1\346\3\0\35\4"+
    "\16\0\2\4\3\0\2\4\3\0\10\4\1\347\24\4"+
    "\16\0\2\4\3\0\2\4\3\0\25\4\1\350\7\4"+
    "\16\0\2\4\3\0\2\4\3\0\23\4\1\351\1\4"+
    "\1\352\7\4\16\0\2\4\3\0\2\4\3\0\30\4"+
    "\1\353\4\4\16\0\2\4\3\0\2\4\3\0\7\4"+
    "\1\354\25\4\16\0\2\4\3\0\2\4\3\0\16\4"+
    "\1\355\16\4\16\0\2\4\3\0\2\4\3\0\20\4"+
    "\1\356\14\4\16\0\2\4\3\0\2\4\3\0\2\4"+
    "\1\357\32\4\16\0\2\4\3\0\2\4\3\0\16\4"+
    "\1\360\16\4\16\0\2\4\3\0\2\4\3\0\4\4"+
    "\1\361\30\4\16\0\2\4\3\0\2\4\3\0\7\4"+
    "\1\362\25\4\16\0\2\4\3\0\1\4\1\363\3\0"+
    "\35\4\16\0\2\4\3\0\2\4\3\0\7\4\1\364"+
    "\25\4\16\0\2\4\3\0\2\4\3\0\10\4\1\365"+
    "\24\4\16\0\2\4\3\0\2\4\3\0\4\4\1\366"+
    "\30\4\16\0\2\4\3\0\2\4\3\0\6\4\1\367"+
    "\26\4\16\0\2\4\3\0\2\4\3\0\7\4\1\370"+
    "\25\4\16\0\2\4\3\0\2\4\3\0\24\4\1\371"+
    "\10\4\16\0\2\4\3\0\1\4\1\372\3\0\35\4"+
    "\16\0\2\4\3\0\1\4\1\373\3\0\35\4\16\0"+
    "\2\4\3\0\1\4\1\374\3\0\35\4\16\0\2\4"+
    "\3\0\2\4\3\0\7\4\1\375\25\4\16\0\2\4"+
    "\3\0\2\4\3\0\7\4\1\376\25\4\16\0\2\4"+
    "\3\0\1\4\1\377\3\0\35\4\16\0\2\4\3\0"+
    "\2\4\3\0\6\4\1\u0100\26\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u0101\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u0102\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\2\4\1\u0103\32\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\u0104\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u0105\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\2\4\1\u0106\32\4\16\0\2\4\3\0"+
    "\2\4\3\0\6\4\1\u0107\26\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u0108\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u0109\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\6\4\1\u010a\26\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u010b\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\1\4\1\u010c\33\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\u010d\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\16\4\1\u010e\16\4\16\0\2\4\3\0"+
    "\2\4\3\0\12\4\1\u010f\22\4\16\0\2\4\3\0"+
    "\2\4\3\0\4\4\1\u0110\30\4\16\0\2\4\3\0"+
    "\2\4\3\0\11\4\1\u0111\23\4\16\0\2\4\3\0"+
    "\2\4\3\0\16\4\1\u0112\16\4\16\0\2\4\3\0"+
    "\1\4\1\u0113\3\0\35\4\16\0\2\4\3\0\2\4"+
    "\3\0\6\4\1\u0114\26\4\16\0\2\4\3\0\2\4"+
    "\3\0\12\4\1\u0115\22\4\16\0\2\4\3\0\1\4"+
    "\1\u0116\3\0\35\4\16\0\2\4\3\0\1\4\1\u0117"+
    "\3\0\35\4\16\0\2\4\3\0\2\4\3\0\20\4"+
    "\1\u0118\14\4\16\0\2\4\3\0\1\4\1\u0119\3\0"+
    "\35\4\16\0\2\4\3\0\2\4\3\0\7\4\1\u011a"+
    "\25\4\16\0\2\4\3\0\2\4\3\0\4\4\1\u011b"+
    "\30\4\16\0\2\4\3\0\1\4\1\u011c\3\0\35\4"+
    "\16\0\2\4\3\0\2\4\3\0\6\4\1\u011d\26\4"+
    "\16\0\2\4\3\0\2\4\3\0\4\4\1\u011e\30\4"+
    "\16\0\2\4\3\0\2\4\3\0\7\4\1\u011f\25\4"+
    "\16\0\2\4\3\0\2\4\3\0\20\4\1\u0120\14\4"+
    "\16\0\2\4\3\0\2\4\3\0\20\4\1\u0121\14\4"+
    "\16\0\2\4\3\0\2\4\3\0\4\4\1\u0122\30\4"+
    "\16\0\2\4\3\0\2\4\3\0\1\4\1\u0123\33\4"+
    "\16\0\2\4\3\0\2\4\3\0\6\4\1\u0124\26\4"+
    "\16\0\2\4\3\0\2\4\3\0\1\4\1\u0125\33\4"+
    "\16\0\2\4\3\0\2\4\3\0\16\4\1\u0126\16\4"+
    "\16\0\2\4\3\0\2\4\3\0\20\4\1\u0127\14\4"+
    "\16\0\2\4\3\0\2\4\3\0\6\4\1\u0128\26\4"+
    "\16\0\2\4\3\0\2\4\3\0\7\4\1\u0129\25\4"+
    "\16\0\2\4\3\0\2\4\3\0\7\4\1\u012a\25\4"+
    "\16\0\2\4\3\0\1\4\1\u012b\3\0\35\4\16\0"+
    "\2\4\3\0\1\4\1\u012c\3\0\35\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\u012d\30\4\16\0\2\4"+
    "\3\0\2\4\3\0\4\4\1\u012e\30\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\u012f\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\u0130\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\20\4\1\u0131\14\4\16\0\2\4"+
    "\3\0\2\4\3\0\20\4\1\u0132\14\4\16\0\2\4"+
    "\3\0\2\4\3\0\7\4\1\u0133\25\4\16\0\2\4"+
    "\3\0\2\4\3\0\7\4\1\u0134\25\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\u0135\26\4\16\0\2\4"+
    "\3\0\2\4\3\0\6\4\1\u0136\26\4\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13727];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\2\11\21\1\4\11"+
    "\2\1\2\11\2\0\26\1\11\11\1\1\1\0\30\1"+
    "\1\0\326\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    private int contador;
    private ArrayList<Yytoken> tokens;
    private boolean eliminar;

	private void writeOutputFile() throws IOException{
			String filename = "file.out";
			BufferedWriter out = new BufferedWriter(
				new FileWriter(filename));
            System.out.println("\n*** Tokens guardados en archivo ***\n");
			for(Yytoken t: this.tokens){
				System.out.println(t);
				out.write(t + "\n");
			}
			out.close();
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
      contador = 0;
    tokens = new ArrayList<Yytoken>();
    eliminar = false;
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 200) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    	try{
		this.writeOutputFile();
        //System.exit(0);
	}catch(IOException ioe){
		ioe.printStackTrace();
	}

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { if(Character.isUpperCase(yytext().charAt(0))){
                    Yytoken t = new Yytoken(0, yytext(), "Error: Los identificadores no pueden iniciar con mayuscula", yyline+1, yycolumn, true);
                    tokens.add(t);
                    eliminar = true;
                    return t;
                }
                else
                {
                    Yytoken t = new Yytoken(0, yytext(), "Error: Simbolo no reconocido", yyline+1, yycolumn, true);
                    tokens.add(t);
                    return t;
                }
            }
          case 63: break;
          case 2: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 64: break;
          case 3: 
            { if(!eliminar){
                contador++;
                Yytoken t = new Yytoken(contador,yytext(),"id",yyline+1,yycolumn,false);
                tokens.add(t);
                return t;
                }
                eliminar = false;
            }
          case 65: break;
          case 4: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num_entero",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 66: break;
          case 5: 
            { //Ignorar
            }
          case 67: break;
          case 6: 
            { //ignorar
            }
          case 68: break;
          case 7: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"caracter_especial",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 69: break;
          case 8: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"asignacion",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 70: break;
          case 9: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"menor_que",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 71: break;
          case 10: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mayor_que",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 72: break;
          case 11: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 73: break;
          case 12: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multiplicacion",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 74: break;
          case 13: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"division",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 75: break;
          case 14: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"punto_coma",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 76: break;
          case 15: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_abre",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 77: break;
          case 16: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"llave_cierra",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 78: break;
          case 17: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"decremento",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 79: break;
          case 18: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"resta_asigna",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 80: break;
          case 19: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"si",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 81: break;
          case 20: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comparacion",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 82: break;
          case 21: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"menor_igual",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 83: break;
          case 22: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mayor_igual",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 84: break;
          case 23: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"diferente_de",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 85: break;
          case 24: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"suma_asigna",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 86: break;
          case 25: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"incremento",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 87: break;
          case 26: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"multipli_asinga",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 88: break;
          case 27: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"operador_logico_and",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 89: break;
          case 28: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"operador_logico_or",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 90: break;
          case 29: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num_flotante",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 91: break;
          case 30: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"num_exponente",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 92: break;
          case 31: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"sino",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 93: break;
          case 32: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ALTO",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 94: break;
          case 33: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ciclo",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 95: break;
          case 34: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"falso",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 96: break;
          case 35: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"entero",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 97: break;
          case 36: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"config",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 98: break;
          case 37: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"SALIDA",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 99: break;
          case 38: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"ENTRADA",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 100: break;
          case 39: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"avanzar",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 101: break;
          case 40: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"funcion",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 102: break;
          case 41: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detener",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 103: break;
          case 42: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"mientras",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 104: break;
          case 43: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"flotante",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 105: break;
          case 44: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"comprimir",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 106: break;
          case 45: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"sobrecupo",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 107: break;
          case 46: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"verdadero",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 108: break;
          case 47: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"salidaDato",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 109: break;
          case 48: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"entradaDato",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 110: break;
          case 49: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"estadoLinea",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 111: break;
          case 50: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"temporizador",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 112: break;
          case 51: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"vaciarCamion",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 113: break;
          case 52: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"estadoEnergia",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 114: break;
          case 53: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"IniciaPrograma",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 115: break;
          case 54: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarParada",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 116: break;
          case 55: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarSensor",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 117: break;
          case 56: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"modalidadSensor",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 118: break;
          case 57: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"compuertaAbierta",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 119: break;
          case 58: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"compuertaCerrada",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 120: break;
          case 59: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"soltarContenedor",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 121: break;
          case 60: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"vaciarContenedor",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 122: break;
          case 61: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"detectarAnomalia",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 123: break;
          case 62: 
            { contador++;
    Yytoken t = new Yytoken(contador,yytext(),"capacidadContenedor",yyline+1,yycolumn,false);
    tokens.add(t);
    return t;
            }
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
